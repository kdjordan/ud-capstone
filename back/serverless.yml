service:
  name: sis
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  # - serverless-reqvalidator-plugin
  # - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    USER_TABLE: sisUsers-${self:provider.stage}
    GROUPS_TABLE: sisGroups-${self:provider.stage}
    # USER_IMAGES_BUCKET: sis-images-${self:provider.stage}
    USER_POOL_ID: us-west-2_S9oCYx1ff
    # SIGNED_URL_EXPIRATION: 300
    # AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:Scan
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}
  

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  

functions:
  Auth:
    handler: src/lambda/auth/authorizer.handler

  GetGroups :
    handler: src/lambda/http/getGroups.handler
    events: 
      - http:
          method: get
          path: getGroups
          cors: true

  CheckUser: 
    handler: src/lambda/http/checkUser.handler
    events: 
      - http:
          authorizer: Auth
          method: get
          path: checkUser/{userId}
          cors: true


  AddUser:
    handler: src/lambda/http/addUser.handler
    events:
      - http:
          # authorizer: Auth
          method: post
          path: addUser
          cors: true
  

  # Auth:
  #   handler: src/lambda/auth/authorizer.handler
  
  # CheckDealerExists:
  #   handler: src/lambda/http/checkDealerExists.handler
  #   events:
  #     - http:
  #         authorizer: Auth
  #         method: get
  #         path: checkDealer/{adminId}
  #         cors: true

  

  # GetDeaaler:
  #   handler: src/lambda/http/getDealer.handler
  #   events:
  #     - http:
  #         authorizer: Auth
  #         method: get
  #         path: dealer/{dealerName}
  #         cors: true
    

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId #cognitoUserId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USER_TABLE}

    GroupsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: groupId #cognitoUserId
            AttributeType: S
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.GROUPS_TABLE}


    