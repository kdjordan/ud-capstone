service:
  name: sis
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

  documentation: 
    api:
      info:
        version: v1.0
        title: Simple Image Share(SIS) API
        description: Serverless Application for sharing images
    models: 
      - name: AddUser
        contentType: application/json
        schema: ${file(models/add-new-user-request.json)}
      - name: DeleteImage
        contentType: application/json
        schema: ${file(models/delete-image-request.json)}
      - name: CreateImageRecordRequest
        contentType: application/json
        schema: ${file(models/create-image-record-request.json)}

    # Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    SIS_USERS: sis-users-${self:provider.stage}
    SIS_IMAGES: sis-images-${self:provider.stage}
    SIS_IMAGES_BUCKET: sis-images-${self:provider.stage}
    USER_POOL_ID: us-west-2_S9oCYx1ff
    SIGNED_URL_EXPIRATION: 300
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    
  iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:Query
  #       - dynamodb:PutItem
  #       - dynamodb:Scan
  #       - dynamodb:GetItem
  #       - dynamodb:UpdateItem
  #     Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SIS_TABLE}
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource: arn:aws:s3:::${self:provider.environment.SIS_IMAGES_BUCKET}/*
  
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  

functions:
  Auth:
    handler: src/lambda/auth/authorizer.handler

  GetAllImages :
    handler: src/lambda/http/getAllImages.handler
    events: 
      - http:
          method: get
          path: getAllImages
          cors: true
    iamRoleStatements:
      - Effect: Allow        
        Action:
          - dynamodb:Scan        
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SIS_IMAGES}

  GetUserImages :
    handler: src/lambda/http/getUserImages.handler
    events: 
      - http:
          authorizer: Auth
          method: get
          path: getUserImages/{userId}
          cors: true
    iamRoleStatements:
      - Effect: Allow        
        Action:   
          - dynamodb:Query        
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SIS_IMAGES}

  DeleteUserImage :
    handler: src/lambda/http/deleteUserImage.handler
    events: 
      - http:
          authorizer: Auth
          method: post
          path: deleteUserImage
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation: 
            summary: Delete a user image from images table
            description: Delete a user image from images table
            requestModels: 
              'application/json': DeleteImage
    iamRoleStatements:
      - Effect: Allow        
        Action:   
          - dynamodb:DeleteItem       
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SIS_IMAGES}

  AddUser:
    handler: src/lambda/http/addUser.handler
    events:
      - http:
          authorizer: Auth
          method: post
          path: addUser
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation: 
            summary: Add a New User
            description: Add a New User
            requestModels: 
              'application/json': AddUser
    iamRoleStatements:
      - Effect: Allow        
        Action:
          - dynamodb:PutItem   
          - dynamodb:GetItem     
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SIS_USERS}
              
  CreateImageRecord:
    handler: src/lambda/http/createImageRecord.handler
    iamRoleStatements:
      - Effect: Allow        
        Action:
          - dynamodb:PutItem                
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SIS_IMAGES}
    events:
      - http:
          authorizer: Auth
          method: post
          path: createImageRecord
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation: 
            summary: Add an Image Record to groups table
            description: Add an Image Record to groups table
            requestModels: 
              'application/json': CreateImageRecordRequest
  
  GenUrl:
    handler: src/lambda/s3/genUrl.handler
    events:
      - http:
          authorizer: Auth
          method: post
          path: genUrl
          cors: true

resources:
  Resources:
    GatewayResponseDefault4XX:
        Type: AWS::ApiGateway::GatewayResponse
        Properties:
          ResponseParameters:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
            gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
          ResponseType: DEFAULT_4XX
          RestApiId:
            Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties: 
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    
    UserImageBucket:
      Type: AWS::S3::Bucket
      Properties: 
        BucketName: ${self:provider.environment.SIS_IMAGES_BUCKET}
        CorsConfiguration: 
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods: 
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: Policy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.SIS_IMAGES_BUCKET}/*'
        Bucket: !Ref UserImageBucket

    SISUserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: PK 
            AttributeType: S
          - AttributeName: SK 
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.SIS_USERS}
        
    SISImagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: PK 
            AttributeType: S
          - AttributeName: SK 
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.SIS_IMAGES}


    