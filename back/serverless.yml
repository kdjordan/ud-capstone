service:
  name: sis
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

  documentation: 
    api:
      info:
        version: v1.0
        title: Simple Image Share(SIS) API
        description: Serverless Application for sharing images
    models: 
      - name: AddUser
        contentType: application/json
        schema: ${file(models/add-new-user-request.json)}
      - name: AddGroup
        contentType: application/json
        schema: ${file(models/add-new-group-request.json)}
      - name: CreateImageRecordRequest
        contentType: application/json
        schema: ${file(models/create-image-record-request.json)}

    # Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    USER_TABLE: sisUsers-${self:provider.stage}
    GROUPS_TABLE: sisGroups-${self:provider.stage}
    USER_IMAGES_BUCKET: sis-images-${self:provider.stage}
    USER_POOL_ID: us-west-2_S9oCYx1ff
    SIGNED_URL_EXPIRATION: 300
    # AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:GetItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.USER_IMAGES_BUCKET}/*
  
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  

functions:
  Auth:
    handler: src/lambda/auth/authorizer.handler

  AddGroup :
    handler: src/lambda/http/addGroup.handler
    events: 
      - http:
          authorizer: Auth
          method: post
          path: addGroup
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation: 
            summary: Great a New Group
            description: Great a New Group
            requestModels: 
              'application/json': AddGroup

  GetGroups :
    handler: src/lambda/http/getGroups.handler
    events: 
      - http:
          method: get
          path: getGroups
          cors: true

  CheckUser: 
    handler: src/lambda/http/checkUser.handler
    events: 
      - http:
          authorizer: Auth
          method: get
          path: checkUser/{userId}
          cors: true


  AddUser:
    handler: src/lambda/http/addUser.handler
    events:
      - http:
          authorizer: Auth
          method: post
          path: addUser
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation: 
            summary: Great a New User
            description: Great a New User
            requestModels: 
              'application/json': AddUser
              
  CreateImageRecord:
    handler: src/lambda/http/createImageRecord.handler
    events:
      - http:
          authorizer: Auth
          method: post
          path: createImageRecord
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation: 
            summary: Add an Image to s3 
            description: Add an Image to s3 
            requestModels: 
              'application/json': CreateImageRequest
  
  GenUrl:
    handler: src/lambda/s3/genUrl.handler
    events:
      - http:
          authorizer: Auth
          method: post
          path: genUrl
          cors: true

resources:
  Resources:
    GatewayResponseDefault4XX:
        Type: AWS::ApiGateway::GatewayResponse
        Properties:
          ResponseParameters:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
            gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
          ResponseType: DEFAULT_4XX
          RestApiId:
            Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties: 
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    
    UserImageBucket:
      Type: AWS::S3::Bucket
      Properties: 
        BucketName: ${self:provider.environment.USER_IMAGES_BUCKET}
        CorsConfiguration: 
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods: 
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: Policy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.USER_IMAGES_BUCKET}/*'
        Bucket: !Ref UserImageBucket

    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId #cognitoUserId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USER_TABLE}

    GroupsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: groupId #cognitoUserId
            AttributeType: S
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.GROUPS_TABLE}


    